plugins {
    id 'java'
    id 'kr.entree.spigradle' version '2.4.2'
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

group = 'fr.minemobs'
version = '1.4'

apply from: rootProject.file('specialSource.gradle')

compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

String missingPermissionMessage = '§8[§4Minemobs Utils§8] §4You do not have the permission!'

repositories {
    mavenCentral()
    maven {
        name = 'CodeMC'
        url = 'https://repo.codemc.org/repository/maven-releases/'
    }
    maven {
        name = "Spigot-Repo"
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    mavenLocal()
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT")
    compileOnly 'org.spigotmc:spigot:1.19-R0.1-SNAPSHOT:remapped-mojang'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly('net.skinsrestorer:skinsrestorer-api:14.2.1') {
        transitive(false)
    }

    implementation 'org.reflections:reflections:0.10.2'
    implementation 'org.bstats:bstats-bukkit:3.0.0'
}

shadowJar {
    archiveClassifier.set('')
    archiveVersion.set('')
    relocate 'org.reflections', 'fr.minemobs.relocate.reflections'
    relocate 'javassist', 'fr.minemobs.relocate.javassist'
    relocate 'org.bstats', 'fr.minemobs.relocate.bstats'
}

buildSpigot {
    args(args, '--remapped')
}

spigot {
    authors 'Minemobs'
    apiVersion '1.19'
    website = "https://github.com/Minemobs/MinemobsUtils"
    //You will never need to install AutoReload on your server but it's just so AutoReload load before my plugin
    softDepends("SkinsRestorer", "AutoReload")
    commands {
        colorcode {
            aliases 'cc', 'chatcolor'
            usage '/<command>'
        }
        craft {
            aliases "crafting", "craftingtable", "workbench"
            permission 'minemobsutils.openWorkbench'
            permissionMessage missingPermissionMessage
            usage '/<command>'
        }
        ec {
            aliases 'enderchest'
            permission 'minemobsutils.enderchest'
            permissionMessage missingPermissionMessage
            usage '/<command> [target] [source]'
        }
        customitems {
            aliases 'ci'
            permission 'minemobsutils.inventories.customitems'
            permissionMessage missingPermissionMessage
            usage '/<command>'
        }
        ping {
            usage '/<command> [player]'
        }
        customenchant {
            aliases 'ce'
            permission 'minemobsutils.inventories.customenchant'
            permissionMessage missingPermissionMessage
            usage '/<command>'
        }
        heal {
            usage '/<command> [player]'
        }
        feed {
            usage '/<command> [player]'
        }
        fly {
            permission 'minemobsutils.fly'
            permissionMessage missingPermissionMessage
            usage '/<command>'
        }
        staffchat {
            aliases 'sc'
            permission 'minemobsutils.mod.chat'
            permissionMessage missingPermissionMessage
            usage '/<command> <message>'
        }
        nick {
            permission 'minemobsutils.nick'
            permissionMessage missingPermissionMessage
            usage '/<command> [player] <nick>'
        }
        broadcast {
            aliases 'bc'
            permission 'minemobsutils.broadcast'
            permissionMessage missingPermissionMessage
            usage '/<command> <message>'
        }
        top {
            permission 'minemobsutils.top'
            permissionMessage missingPermissionMessage
            usage '/<command>'
        }
    }

    debug {
        args '--nojline' , '--max-players', '100', '--nogui', '--server-name', 'Cacahuete Test Server'

        buildVersion = "1.19"
        jvmArgs '-Xmx2G'
        serverPort 25565
    }
}

afterEvaluate {
    shadowJar {
        doLast {
            def outputFiles = outputs.files.files
            for (inputFile in outputFiles) {
                File intermediateFile = new File(temporaryDir, inputFile.name.replace('.jar', '-obf.jar'))
                File outputFile = inputFile
                remapMojangToSpigot(inputFile, intermediateFile, outputFile, "1.19-R0.1-SNAPSHOT")
            }
        }
    }
}


tasks.prepareSpigotPlugins.dependsOn(shadowJar)
tasks.runSpigot.dependsOn(prepareSpigotPlugins)